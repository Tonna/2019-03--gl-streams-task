package ua.procamp.streams;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import ua.procamp.streams.stream.AsIntStream;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class AsIntStreamSmokeTests {

    private final int[] toArray;
    private final int sum;
    private final int[] map;
    private int[] input;
    private Double average;
    private int max;
    private int min;
    private long count;
    private int[] flatMap1;
    private int[] flatMap2;
    private int reduce1;
    private int reduce2;

    public AsIntStreamSmokeTests(int[] input,
                                 double average,
                                 int max,
                                 int min,
                                 long count,
                                 int sum,
                                 int[] toArray,
                                 int[] map,
                                 int[] flatMap1,
                                 int[] flatMap2,
                                 int reduce1,
                                 int reduce2) {
        this.input = input;
        this.average = average;
        this.max = max;
        this.min = min;
        this.count = count;
        this.sum = sum;
        this.toArray = toArray;
        this.map = map;
        this.flatMap1 = flatMap1;
        this.flatMap2 = flatMap2;
        this.reduce1 = reduce1;
        this.reduce2 = reduce2;
    }

    @Test
    public void testAverage() {
        assertEquals(average, AsIntStream.of(input).average());
    }

    @Test
    public void testMax() {
        assertEquals(max, (int) AsIntStream.of(input).max());
    }

    @Test
    public void testMin() {
        assertEquals(min, (int) AsIntStream.of(input).min());
    }

    @Test
    public void testCount() {
        assertEquals((int) count, (int) AsIntStream.of(input).count());
    }

    @Test
    public void testSum() {
        assertEquals(sum, AsIntStream.of(input).sum());
    }

    @Test
    public void testToArray() {
        assertArrayEquals(toArray, AsIntStream.of(input).toArray());
    }

    @Test
    public void testForEach1() {
        List<Integer> list = new LinkedList<>();
        AsIntStream.of(input).forEach(list::add);

        List<Integer> expected = new LinkedList<>();
        for (int i : input) {
            expected.add(i);
        }

        assertEquals(expected, list);
    }

    @Test
    public void testForEach2() {
        List<String> list = new LinkedList<>();
        AsIntStream.of(input).forEach(e -> list.add("42 = " + e + " ? - " + (42 == e)));

        int theAnswer = 42;
        List<String> expected = new LinkedList<>();
        for (int i : input) {
            expected.add(String
                    .format("%d = %d ? - %s", theAnswer, i, (theAnswer == i)));
        }
        assertEquals(expected, list);
    }

    @Test
    public void testMap() {
        assertArrayEquals(map,
                AsIntStream.of(input).map(x -> (x * 3) - 14).toArray());
    }

    @Test
    public void testFlatMap1() {
        assertArrayEquals(flatMap1, AsIntStream.of(input).
                flatMap(x -> AsIntStream.of(x - 1, x + 1)).toArray());
    }

    @Test
    public void testFlatMap2() {
        assertArrayEquals(flatMap2, AsIntStream.of(input)
                .flatMap(x -> AsIntStream.of(x - 1, 22, x + 3)).toArray());
    }

    @Test
    public void testReduce1() {
        assertEquals(reduce1, AsIntStream.of(input)
                .reduce(15, (a, b) -> a + b));
    }

    @Test
    public void testReduce2() {
        assertEquals(reduce2, AsIntStream.of(input)
                .reduce(0, (a, b) -> a - b));
    }

    @Parameterized.Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {
                        //initial input
                        new int[]{1, 2, 3},
                        //average
                        2,
                        //max
                        3,
                        //min
                        1,
                        //count
                        3,
                        //sum
                        6,
                        //toArray() output
                        new int[]{1, 2, 3},
                        //map(x -> (x*3 -14))
                        new int[]{-11, -8, -5},
                        //flatMap(x -> (x - 1, x + 2))
                        new int[]{0, 2, 1, 3, 2, 4},
                        //flatMap(x -> (x - 1, 22, x + 3))
                        new int[]{0, 22, 4, 1, 22, 5, 2, 22, 6},
                        //reduce(15, a - b)
                        21,
                        //reduce(0, a - b)
                        -6
                },
                //this case is overflow handling
                {
                        //initial input
                        new int[]{2000000035, 2000000331},
                        //average
                        2000000183.0,
                        //max
                        2000000331,
                        //min
                        2000000035,
                        //count
                        2,
                        //sum
                        -294966930,
                        //toArray() output
                        new int[]{2000000035, 2000000331},
                        //map(x -> (x*3 -14))
                        new int[]{1705032795, 1705033683},
                        //flatMap(x -> (x - 1, x + 2))
                        new int[]{2000000034, 2000000036, 2000000330,
                                2000000332},
                        //flatMap(x -> (x - 1, 22, x + 3))
                        new int[]{2000000034, 22, 2000000038, 2000000330, 22,
                                2000000334},
                        //reduce(15, a - b)
                        -294966915,
                        //reduce(0, a - b)
                        294966930},


                //Generated test data
                {new int[]{154315, 72977, 154521, 77187, 192879, 72980, 86182
                        , 97213, 113242, 118269, 85825, 64849, 6260, 148377,
                        165288, 123110, 11518, 185963, 102743},
                        107036.73684210527, 192879, 6260, 19, 2033698,
                        new int[]{154315, 72977, 154521, 77187, 192879, 72980
                                , 86182, 97213, 113242, 118269, 85825, 64849,
                                6260, 148377, 165288, 123110, 11518, 185963,
                                102743}, new int[]{462931, 218917, 463549,
                        231547, 578623, 218926, 258532, 291625, 339712,
                        354793, 257461, 194533, 18766, 445117, 495850, 369316
                        , 34540, 557875, 308215}, new int[]{154314, 154316,
                        72976, 72978, 154520, 154522, 77186, 77188, 192878,
                        192880, 72979, 72981, 86181, 86183, 97212, 97214,
                        113241, 113243, 118268, 118270, 85824, 85826, 64848,
                        64850, 6259, 6261, 148376, 148378, 165287, 165289,
                        123109, 123111, 11517, 11519, 185962, 185964, 102742,
                        102744}, new int[]{154314, 22, 154318, 72976, 22,
                        72980, 154520, 22, 154524, 77186, 22, 77190, 192878,
                        22, 192882, 72979, 22, 72983, 86181, 22, 86185, 97212
                        , 22, 97216, 113241, 22, 113245, 118268, 22, 118272,
                        85824, 22, 85828, 64848, 22, 64852, 6259, 22, 6263,
                        148376, 22, 148380, 165287, 22, 165291, 123109, 22,
                        123113, 11517, 22, 11521, 185962, 22, 185966, 102742,
                        22, 102746}, 2033713, -2033698},
                {new int[]{193606, 167264, 178818, 84080, 38186, 92207,
                        112827, 186623, 75912, 195906, 62720, 74820, 36104,
                        155195, 27034, 16885, 83154}, 104784.76470588235,
                        195906, 16885, 17, 1781341, new int[]{193606, 167264,
                        178818, 84080, 38186, 92207, 112827, 186623, 75912,
                        195906, 62720, 74820, 36104, 155195, 27034, 16885,
                        83154}, new int[]{580804, 501778, 536440, 252226,
                        114544, 276607, 338467, 559855, 227722, 587704,
                        188146, 224446, 108298, 465571, 81088, 50641, 249448}
                        , new int[]{193605, 193607, 167263, 167265, 178817,
                        178819, 84079, 84081, 38185, 38187, 92206, 92208,
                        112826, 112828, 186622, 186624, 75911, 75913, 195905,
                        195907, 62719, 62721, 74819, 74821, 36103, 36105,
                        155194, 155196, 27033, 27035, 16884, 16886, 83153,
                        83155}, new int[]{193605, 22, 193609, 167263, 22,
                        167267, 178817, 22, 178821, 84079, 22, 84083, 38185,
                        22, 38189, 92206, 22, 92210, 112826, 22, 112830,
                        186622, 22, 186626, 75911, 22, 75915, 195905, 22,
                        195909, 62719, 22, 62723, 74819, 22, 74823, 36103, 22
                        , 36107, 155194, 22, 155198, 27033, 22, 27037, 16884,
                        22, 16888, 83153, 22, 83157}, 1781356, -1781341},
                {new int[]{49008, 110548, 138302, 199509, 67226, 184717,
                        90750, 88622, 50206, 68135}, 104702.3, 199509, 49008,
                        10, 1047023, new int[]{49008, 110548, 138302, 199509,
                        67226, 184717, 90750, 88622, 50206, 68135},
                        new int[]{147010, 331630, 414892, 598513, 201664,
                                554137, 272236, 265852, 150604, 204391},
                        new int[]{49007, 49009, 110547, 110549, 138301,
                                138303, 199508, 199510, 67225, 67227, 184716,
                                184718, 90749, 90751, 88621, 88623, 50205,
                                50207, 68134, 68136}, new int[]{49007, 22,
                        49011, 110547, 22, 110551, 138301, 22, 138305, 199508
                        , 22, 199512, 67225, 22, 67229, 184716, 22, 184720,
                        90749, 22, 90753, 88621, 22, 88625, 50205, 22, 50209,
                        68134, 22, 68138}, 1047038, -1047023},
                {new int[]{31626, 133214, 24249, 115726, 174184, 90538,
                        164105, 25046, 102811, 13372, 119874, 185588, 118135,
                        78700, 5821, 156610, 199325, 2770}, 96760.77777777778
                        , 199325, 2770, 18, 1741694, new int[]{31626, 133214,
                        24249, 115726, 174184, 90538, 164105, 25046, 102811,
                        13372, 119874, 185588, 118135, 78700, 5821, 156610,
                        199325, 2770}, new int[]{94864, 399628, 72733, 347164
                        , 522538, 271600, 492301, 75124, 308419, 40102,
                        359608, 556750, 354391, 236086, 17449, 469816, 597961
                        , 8296}, new int[]{31625, 31627, 133213, 133215,
                        24248, 24250, 115725, 115727, 174183, 174185, 90537,
                        90539, 164104, 164106, 25045, 25047, 102810, 102812,
                        13371, 13373, 119873, 119875, 185587, 185589, 118134,
                        118136, 78699, 78701, 5820, 5822, 156609, 156611,
                        199324, 199326, 2769, 2771}, new int[]{31625, 22,
                        31629, 133213, 22, 133217, 24248, 22, 24252, 115725,
                        22, 115729, 174183, 22, 174187, 90537, 22, 90541,
                        164104, 22, 164108, 25045, 22, 25049, 102810, 22,
                        102814, 13371, 22, 13375, 119873, 22, 119877, 185587,
                        22, 185591, 118134, 22, 118138, 78699, 22, 78703,
                        5820, 22, 5824, 156609, 22, 156613, 199324, 22,
                        199328, 2769, 22, 2773}, 1741709, -1741694},
                {new int[]{166585, 67079, 70065, 49106, 14324, 47987, 150419,
                        116219, 25846, 124953, 126169, 151028, 32393, 188385,
                        68446, 95501, 189235}, 99043.5294117647, 189235,
                        14324, 17, 1683740, new int[]{166585, 67079, 70065,
                        49106, 14324, 47987, 150419, 116219, 25846, 124953,
                        126169, 151028, 32393, 188385, 68446, 95501, 189235},
                        new int[]{499741, 201223, 210181, 147304, 42958,
                                143947, 451243, 348643, 77524, 374845, 378493
                                , 453070, 97165, 565141, 205324, 286489,
                                567691}, new int[]{166584, 166586, 67078,
                        67080, 70064, 70066, 49105, 49107, 14323, 14325,
                        47986, 47988, 150418, 150420, 116218, 116220, 25845,
                        25847, 124952, 124954, 126168, 126170, 151027, 151029
                        , 32392, 32394, 188384, 188386, 68445, 68447, 95500,
                        95502, 189234, 189236}, new int[]{166584, 22, 166588,
                        67078, 22, 67082, 70064, 22, 70068, 49105, 22, 49109,
                        14323, 22, 14327, 47986, 22, 47990, 150418, 22,
                        150422, 116218, 22, 116222, 25845, 22, 25849, 124952,
                        22, 124956, 126168, 22, 126172, 151027, 22, 151031,
                        32392, 22, 32396, 188384, 22, 188388, 68445, 22,
                        68449, 95500, 22, 95504, 189234, 22, 189238}, 1683755
                        , -1683740},
                {new int[]{146707, 152723}, 149715.0, 152723, 146707, 2,
                        299430, new int[]{146707, 152723}, new int[]{440107,
                        458155}, new int[]{146706, 146708, 152722, 152724},
                        new int[]{146706, 22, 146710, 152722, 22, 152726},
                        299445, -299430},
                {new int[]{63780, 36521, 90209, 97739, 46214, 152639, 172516,
                        68995, 124170, 21668, 99182, 127259, 8336, 128468,
                        71800, 63872}, 85835.5, 172516, 8336, 16, 1373368,
                        new int[]{63780, 36521, 90209, 97739, 46214, 152639,
                                172516, 68995, 124170, 21668, 99182, 127259,
                                8336, 128468, 71800, 63872}, new int[]{191326
                        , 109549, 270613, 293203, 138628, 457903, 517534,
                        206971, 372496, 64990, 297532, 381763, 24994, 385390,
                        215386, 191602}, new int[]{63779, 63781, 36520, 36522
                        , 90208, 90210, 97738, 97740, 46213, 46215, 152638,
                        152640, 172515, 172517, 68994, 68996, 124169, 124171,
                        21667, 21669, 99181, 99183, 127258, 127260, 8335,
                        8337, 128467, 128469, 71799, 71801, 63871, 63873},
                        new int[]{63779, 22, 63783, 36520, 22, 36524, 90208,
                                22, 90212, 97738, 22, 97742, 46213, 22, 46217
                                , 152638, 22, 152642, 172515, 22, 172519,
                                68994, 22, 68998, 124169, 22, 124173, 21667,
                                22, 21671, 99181, 22, 99185, 127258, 22,
                                127262, 8335, 22, 8339, 128467, 22, 128471,
                                71799, 22, 71803, 63871, 22, 63875}, 1373383,
                        -1373368},
                {new int[]{52772, 131187, 26527, 30476, 125166, 190013, 31929
                        , 86092, 143111, 65015, 183035, 133861, 103267, 55399
                        , 28967, 79601}, 91651.125, 190013, 26527, 16,
                        1466418, new int[]{52772, 131187, 26527, 30476,
                        125166, 190013, 31929, 86092, 143111, 65015, 183035,
                        133861, 103267, 55399, 28967, 79601},
                        new int[]{158302, 393547, 79567, 91414, 375484,
                                570025, 95773, 258262, 429319, 195031, 549091
                                , 401569, 309787, 166183, 86887, 238789},
                        new int[]{52771, 52773, 131186, 131188, 26526, 26528,
                                30475, 30477, 125165, 125167, 190012, 190014,
                                31928, 31930, 86091, 86093, 143110, 143112,
                                65014, 65016, 183034, 183036, 133860, 133862,
                                103266, 103268, 55398, 55400, 28966, 28968,
                                79600, 79602}, new int[]{52771, 22, 52775,
                        131186, 22, 131190, 26526, 22, 26530, 30475, 22,
                        30479, 125165, 22, 125169, 190012, 22, 190016, 31928,
                        22, 31932, 86091, 22, 86095, 143110, 22, 143114,
                        65014, 22, 65018, 183034, 22, 183038, 133860, 22,
                        133864, 103266, 22, 103270, 55398, 22, 55402, 28966,
                        22, 28970, 79600, 22, 79604}, 1466433, -1466418},
                {new int[]{49332, 111620, 160096, 61383, 135071, 27886,
                        160258, 183460, 197800, 18038, 171594, 84612, 124232}
                        , 114260.15384615384, 197800, 18038, 13, 1485382,
                        new int[]{49332, 111620, 160096, 61383, 135071, 27886
                                , 160258, 183460, 197800, 18038, 171594,
                                84612, 124232}, new int[]{147982, 334846,
                        480274, 184135, 405199, 83644, 480760, 550366, 593386
                        , 54100, 514768, 253822, 372682}, new int[]{49331,
                        49333, 111619, 111621, 160095, 160097, 61382, 61384,
                        135070, 135072, 27885, 27887, 160257, 160259, 183459,
                        183461, 197799, 197801, 18037, 18039, 171593, 171595,
                        84611, 84613, 124231, 124233}, new int[]{49331, 22,
                        49335, 111619, 22, 111623, 160095, 22, 160099, 61382,
                        22, 61386, 135070, 22, 135074, 27885, 22, 27889,
                        160257, 22, 160261, 183459, 22, 183463, 197799, 22,
                        197803, 18037, 22, 18041, 171593, 22, 171597, 84611,
                        22, 84615, 124231, 22, 124235}, 1485397, -1485382}

        });
    }
}